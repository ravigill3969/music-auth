package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"music-auth/graph/model"
	middleware "music-auth/internal/middlware"
	"net/http"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, email string, password string) (*model.AuthPayload, error) {
	token, user, err := r.AuthService.RegisterUser(username, email, password)
	if err != nil {
		return nil, err
	}

	rw := middleware.GetResponseWriter(ctx)
	if rw == nil {
		return nil, fmt.Errorf("could not get response writer")
	}

	http.SetCookie(rw, &http.Cookie{
		Name:     "auth_token",
		Value:    token,
		HttpOnly: true,
		Secure:   false,
		Path:     "/",
		SameSite: http.SameSiteLaxMode,
	})

	return &model.AuthPayload{

		User: &model.User{
			ID:       user.ID.String(),
			Email:    user.Email,
			Username: user.Username,
		},
	}, nil
}


func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.LoginResponse, error) {
	token, err := r.AuthService.Login(email, password)
	if err != nil {
		return nil, err
	}

	rw := middleware.GetResponseWriter(ctx)
	if rw == nil {
		return nil, fmt.Errorf("could not get response writer")
	}

	http.SetCookie(rw, &http.Cookie{
		Name:     "auth_token",
		Value:    token,
		HttpOnly: true,
		Secure:   false,
		Path:     "/",
		SameSite: http.SameSiteLaxMode,
	})

	return &model.LoginResponse{
		Success: true,
		Message: "Logged in successfully",
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
*/
