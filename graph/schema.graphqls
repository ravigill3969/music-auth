scalar Date

type User {
  id: ID!
  username: String!
  email: String!
}

type AuthPayload {
  user: User!
}

type LoginResponse {
  success: Boolean!
  message: String!
}

type GetUser {
  id: ID!
  username: String!
  email: String!
  account_type: String!
  ending_date: Date
}

type BasicResponse {
  success: Boolean!
  message: String!
}

type Mutation {
  register(username: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): LoginResponse!
  updatePassword(oldPassword: String!, newPassword: String!): BasicResponse!

  updateEmail(newEmail: String!): BasicResponse!
  updateUsername(newUsername: String!): BasicResponse!
}

type GetUserInfoResponse {
  success: Boolean!
  message: String!
  user: GetUser
}

type Query {
  getUserInfo: GetUserInfoResponse!
}
