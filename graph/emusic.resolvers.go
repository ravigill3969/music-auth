package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"music-auth/graph/model"

	"github.com/google/uuid"
)

// GetPresignedURLForUploadingTrack is the resolver for the getPresignedURLForUploadingTrack field.
func (r *mutationResolver) GetPresignedURLForUploadingTrack(ctx context.Context, name string, contentType string) (*model.PresignedURL, error) {
	url, key, err := r.MusicService.GetPresignedURLForTrackUploading(ctx, name, contentType)

	if err != nil {
		return nil, fmt.Errorf("%s", err.Error())
	}

	return &model.PresignedURL{
		URL: url,
		Key: key,
	}, nil
}

// SaveTrack is the resolver for the saveTrack field.
func (r *mutationResolver) SaveTrack(ctx context.Context, albumID *uuid.UUID, title string, artist *string, genre *string, duration *int32, fileSize *int32, format string, key string) (*model.BasicResponse, error) {
	err := r.MusicService.SaveTrackInDB(ctx, albumID, title, *artist, *genre, format, key, *duration, *fileSize)

	if err != nil {
		return nil, fmt.Errorf("%s", err.Error())
	}

	res := &model.BasicResponse{
		Success: true,
		Message: "Track upload successfull",
	}

	return res, nil
}
